// Code generated by protoc-gen-go. DO NOT EDIT.
// source: books.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_01e0dc127ded4184, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Book struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Author               string   `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Book) Reset()         { *m = Book{} }
func (m *Book) String() string { return proto.CompactTextString(m) }
func (*Book) ProtoMessage()    {}
func (*Book) Descriptor() ([]byte, []int) {
	return fileDescriptor_01e0dc127ded4184, []int{1}
}

func (m *Book) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Book.Unmarshal(m, b)
}
func (m *Book) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Book.Marshal(b, m, deterministic)
}
func (m *Book) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Book.Merge(m, src)
}
func (m *Book) XXX_Size() int {
	return xxx_messageInfo_Book.Size(m)
}
func (m *Book) XXX_DiscardUnknown() {
	xxx_messageInfo_Book.DiscardUnknown(m)
}

var xxx_messageInfo_Book proto.InternalMessageInfo

func (m *Book) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Book) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Book) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

type BookIdRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BookIdRequest) Reset()         { *m = BookIdRequest{} }
func (m *BookIdRequest) String() string { return proto.CompactTextString(m) }
func (*BookIdRequest) ProtoMessage()    {}
func (*BookIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01e0dc127ded4184, []int{2}
}

func (m *BookIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BookIdRequest.Unmarshal(m, b)
}
func (m *BookIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BookIdRequest.Marshal(b, m, deterministic)
}
func (m *BookIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookIdRequest.Merge(m, src)
}
func (m *BookIdRequest) XXX_Size() int {
	return xxx_messageInfo_BookIdRequest.Size(m)
}
func (m *BookIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BookIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BookIdRequest proto.InternalMessageInfo

func (m *BookIdRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type BookList struct {
	Books                []*Book  `protobuf:"bytes,1,rep,name=books,proto3" json:"books,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BookList) Reset()         { *m = BookList{} }
func (m *BookList) String() string { return proto.CompactTextString(m) }
func (*BookList) ProtoMessage()    {}
func (*BookList) Descriptor() ([]byte, []int) {
	return fileDescriptor_01e0dc127ded4184, []int{3}
}

func (m *BookList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BookList.Unmarshal(m, b)
}
func (m *BookList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BookList.Marshal(b, m, deterministic)
}
func (m *BookList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookList.Merge(m, src)
}
func (m *BookList) XXX_Size() int {
	return xxx_messageInfo_BookList.Size(m)
}
func (m *BookList) XXX_DiscardUnknown() {
	xxx_messageInfo_BookList.DiscardUnknown(m)
}

var xxx_messageInfo_BookList proto.InternalMessageInfo

func (m *BookList) GetBooks() []*Book {
	if m != nil {
		return m.Books
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*Book)(nil), "pb.Book")
	proto.RegisterType((*BookIdRequest)(nil), "pb.BookIdRequest")
	proto.RegisterType((*BookList)(nil), "pb.BookList")
}

func init() { proto.RegisterFile("books.proto", fileDescriptor_01e0dc127ded4184) }

var fileDescriptor_01e0dc127ded4184 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0xb3, 0x49, 0x37, 0xb6, 0x13, 0x15, 0x1c, 0x44, 0x42, 0x0e, 0x36, 0x2e, 0x82, 0xc1,
	0x43, 0x90, 0xfa, 0x06, 0x52, 0x91, 0x82, 0xa7, 0x78, 0xf0, 0xdc, 0x34, 0x03, 0x5d, 0x5a, 0xdd,
	0x98, 0x9d, 0x0a, 0xbe, 0x9e, 0x4f, 0x26, 0xbb, 0xb5, 0xb1, 0x78, 0xe9, 0xf1, 0x9b, 0xef, 0x0f,
	0x3f, 0x06, 0x92, 0xda, 0x98, 0x95, 0x2d, 0xdb, 0xce, 0xb0, 0xc1, 0xb0, 0xad, 0xd5, 0x11, 0xc8,
	0xc7, 0xb7, 0x96, 0xbf, 0xd4, 0x14, 0x06, 0x0f, 0xc6, 0xac, 0xf0, 0x14, 0x42, 0xdd, 0xa4, 0x22,
	0x17, 0x85, 0xac, 0x42, 0xdd, 0xe0, 0x39, 0x48, 0xd6, 0xbc, 0xa6, 0x34, 0xcc, 0x45, 0x31, 0xaa,
	0xb6, 0x02, 0x2f, 0x20, 0x9e, 0x6f, 0x78, 0x69, 0xba, 0x34, 0xf2, 0xe7, 0x5f, 0xa5, 0xc6, 0x70,
	0xe2, 0x56, 0x66, 0x4d, 0x45, 0x1f, 0x1b, 0xb2, 0xfc, 0x7f, 0x4e, 0xdd, 0xc2, 0xd0, 0x05, 0x9e,
	0xb5, 0x65, 0xbc, 0x04, 0xe9, 0x71, 0x52, 0x91, 0x47, 0x45, 0x32, 0x19, 0x96, 0x6d, 0x5d, 0x3a,
	0xb3, 0xda, 0x9e, 0x27, 0xdf, 0x02, 0x12, 0xa7, 0x5f, 0xa8, 0xfb, 0xd4, 0x0b, 0xc2, 0x2b, 0x18,
	0xf8, 0xde, 0xc8, 0x05, 0x3d, 0x75, 0x76, 0xbc, 0xeb, 0x38, 0x43, 0x05, 0x38, 0x86, 0x78, 0xf6,
	0x6e, 0xa9, 0x63, 0xec, 0xd7, 0xb2, 0xbf, 0xb8, 0x0a, 0xf0, 0x1a, 0xa2, 0x27, 0x62, 0x3c, 0xdb,
	0xb9, 0x3d, 0x69, 0xd6, 0x17, 0x54, 0x80, 0x37, 0x10, 0x4f, 0x69, 0x4d, 0x4c, 0x87, 0x82, 0x39,
	0xc8, 0xd7, 0x39, 0x2f, 0x96, 0xfb, 0x4c, 0x7b, 0xfe, 0x9d, 0xa8, 0x63, 0xff, 0xeb, 0xfb, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0xd9, 0x28, 0xa6, 0x7a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BookServiceClient is the client API for BookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BookServiceClient interface {
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BookList, error)
	Insert(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Empty, error)
	Get(ctx context.Context, in *BookIdRequest, opts ...grpc.CallOption) (*Book, error)
	Delete(ctx context.Context, in *BookIdRequest, opts ...grpc.CallOption) (*Book, error)
	Watch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (BookService_WatchClient, error)
}

type bookServiceClient struct {
	cc *grpc.ClientConn
}

func NewBookServiceClient(cc *grpc.ClientConn) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BookList, error) {
	out := new(BookList)
	err := c.cc.Invoke(ctx, "/pb.BookService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) Insert(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.BookService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) Get(ctx context.Context, in *BookIdRequest, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/pb.BookService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) Delete(ctx context.Context, in *BookIdRequest, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/pb.BookService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) Watch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (BookService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BookService_serviceDesc.Streams[0], "/pb.BookService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookService_WatchClient interface {
	Recv() (*Book, error)
	grpc.ClientStream
}

type bookServiceWatchClient struct {
	grpc.ClientStream
}

func (x *bookServiceWatchClient) Recv() (*Book, error) {
	m := new(Book)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BookServiceServer is the server API for BookService service.
type BookServiceServer interface {
	List(context.Context, *Empty) (*BookList, error)
	Insert(context.Context, *Book) (*Empty, error)
	Get(context.Context, *BookIdRequest) (*Book, error)
	Delete(context.Context, *BookIdRequest) (*Book, error)
	Watch(*Empty, BookService_WatchServer) error
}

// UnimplementedBookServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBookServiceServer struct {
}

func (*UnimplementedBookServiceServer) List(ctx context.Context, req *Empty) (*BookList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedBookServiceServer) Insert(ctx context.Context, req *Book) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (*UnimplementedBookServiceServer) Get(ctx context.Context, req *BookIdRequest) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedBookServiceServer) Delete(ctx context.Context, req *BookIdRequest) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedBookServiceServer) Watch(req *Empty, srv BookService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func RegisterBookServiceServer(s *grpc.Server, srv BookServiceServer) {
	s.RegisterService(&_BookService_serviceDesc, srv)
}

func _BookService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BookService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BookService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).Insert(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BookService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).Get(ctx, req.(*BookIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BookService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).Delete(ctx, req.(*BookIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookServiceServer).Watch(m, &bookServiceWatchServer{stream})
}

type BookService_WatchServer interface {
	Send(*Book) error
	grpc.ServerStream
}

type bookServiceWatchServer struct {
	grpc.ServerStream
}

func (x *bookServiceWatchServer) Send(m *Book) error {
	return x.ServerStream.SendMsg(m)
}

var _BookService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _BookService_List_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _BookService_Insert_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BookService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BookService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _BookService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "books.proto",
}
